#!/usr/bin/env ruby

require 'optparse'
require 'curses'
require 'vying'

rules = Othello
p2b = {}
number = 1

class HumanBot < AI::Bot
  def select( sequence, position, player )
    w = $scr.maxx
    h = $scr.maxy

    $scr.clear

    $scr.setpos( 0, 0 )
    $scr.addstr( position.to_s )
    $scr.setpos( h-2, 0 )
    $scr.addstr( "Ops: #{position.moves.inspect}" )
    $scr.setpos( h-1, 0 )
    $scr.addstr( "Select: " );
    move = $scr.getstr
    exit if move == ""
    $scr.refresh
    until position.move?( move )
      $scr.setpos( 0, 0 )
      $scr.addstr( position.to_s )
      $scr.setpos( h-2, 0 )
      $scr.addstr( "Ops: #{position.moves.inspect}" )
      $scr.setpos( h-1, 0 )
      $scr.addstr( "Select: " );
      move = $scr.getstr
      exit if move == ""
      $scr.refresh
    end
    move 
  end
end

opts = OptionParser.new

opts.on( "-r", "--rules RULES" ) { |r| rules = Kernel.const_get( r ) }
opts.on( "-n", "--number NUMBER" ) { |n| number = Integer(n) }
opts.on( "-p", "--player PLAYER=BOT" ) do |s|
  s =~ /(\w*)=(\w*)/
  p2b[$1.downcase.intern] = AI::Bot.find( $2 ).new
end


opts.parse( ARGV )

$scr = Curses::init_screen
Curses::cbreak

def summarize( games )
  players = {}
  games.each do |g|
    g.players.each do |p|
      players[p] ||= [0,0,0]
      players[p][0] += 1 if g.winner?( p )
      players[p][1] += 1 if g.loser?( p )
      players[p][2] += 1 if g.draw?
    end
  end
  players.each_pair { |k,v| puts "#{k} #{v[0]}-#{v[1]}-#{v[2]}" }
end


games = []
number.times do |n|

  g = Game.new( rules )
  g.register_users( p2b )
  results = g.play

  games << g
end

Curses::close_screen

summarize( games )

